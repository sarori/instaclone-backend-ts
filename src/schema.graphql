type MutationResponse {
  ok: Boolean!
  id: Int
  error: String
  ok: Boolean!
  id: Int
  error: String
  ok: Boolean!
  id: Int
  error: String
  ok: Boolean!
  id: Int
  error: String
  ok: Boolean!
  id: Int
  error: String
  ok: Boolean!
  id: Int
  error: String
}

type Mutation {
  createComment(id: Int!, payload: String!): MutationResponse!
  deleteComment(id: Int!): MutationResponse
  editComment(id: Int!, payload: String!): MutationResponse!
  toggleLike(id: Int!): MutationResponse!
  deletePhoto(id: Int!): MutationResponse!
  editPhoto(id: Int!, caption: String): MutationResponse!
  uploadPhoto(file: Upload!, caption: String): Photo
  createAccount(firstName: String!, lastName: String!, username: String!, email: String!, password: String!): createAccountResponse!
  editProfile(id: Int!, firstName: String, lastName: String, username: String, email: String, password: String): editProfileResponse!
  login(username: String!, password: String!): LoginResponse!
}

type Comment {
  int: Int!
  payload: String!
  photoId: Int!
  user: User!
  photo: Photo!
  createdAt: String!
  updatedAt: String!
}

type Hashtag {
  id: Int!
  hashtag: String!
  totalPhotos: Int!
  createdAt: String!
  updatedAt: String!
  photos: [Photo]
}

type Like {
  id: Int!
  photoId: Int!
  photo: Photo!
  createdAt: String!
  updatedAt: String!
}

type Query {
  searchPhotos(keyword: String!): [Photo]
  seeFeed: [Photo]
  seeHashtag(hashtag: String!): Hashtag
  seePhotoComments(id: Int!, page: Int!): [Comment]
  seePhotoLikes(id: Int!): [User]
  me(token: String!): meResponse!
  seeProfile(username: String!): seeProfileResponse!
  seeUser(id: Int!): seeUserReponse!
}

type Photo {
  id: Int!
  user: User!
  file: String!
  caption: String
  hashtag: Hashtag
  createdAt: String!
  updatedAt: String!
  userId: Int!
  hashtagId: Int
  likesNumber: Int!
  likes: [Like]
  comments: [Comment]
  commentNumber: Int!
  isMine: Boolean!
  isLiked: Boolean!
}

scalar Upload

type createAccountResponse {
  ok: Boolean!
  error: String
}

type editProfileResponse {
  ok: Boolean!
  error: String
}

type LoginResponse {
  ok: Boolean!
  token: String
  error: String
}

type meResponse {
  ok: Boolean!
  error: String
  user: User
}

type seeProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type seeUserReponse {
  ok: Boolean!
  error: String
  user: User
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  createdAt: String!
  updatedAt: String!
  bio: String
  avatar: String
}
